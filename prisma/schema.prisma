datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

model User {
  id String @id @default(cuid())

  name      String  @db.VarChar(100)
  username  String  @unique @db.VarChar(100)
  email     String  @unique @db.VarChar(255)
  avatarURL String? @db.Text

  password Password?

  places         Place[]
  menuItems      MenuItem[]
  menuItemReview MenuItemReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  id     String @id @default(cuid())
  hash   String @unique
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Place {
  id String @id @default(cuid())

  slug        String  @unique @db.VarChar(255)
  name        String  @db.VarChar(255)
  description String? @db.Text

  priceMin Decimal @db.Money
  priceMax Decimal @db.Money

  menuItems MenuItem[]

  cityId    String
  city      City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  address   String @db.Text
  latitude  Float
  longitude Float

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, slug])
}

model MenuItem {
  id String @id @default(cuid())

  slug        String  @unique @db.VarChar(255)
  name        String  @db.VarChar(255)
  price       Decimal @default(0) @db.Money
  description String? @db.Text

  images  MenuItemImage[]
  reviews MenuItemReview[]

  placeId String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItemImage {
  id String @id @default(cuid())

  url String @unique @db.Text

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItemReview {
  id String @id @default(cuid())

  menuItemId String
  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  rating  Int
  comment String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id String @id @default(cuid())

  slug      String @unique @db.VarChar(255)
  name      String @db.VarChar(255)
  latitude  Float
  longitude Float

  places Place[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
